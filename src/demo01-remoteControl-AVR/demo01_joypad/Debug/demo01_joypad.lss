
demo01_joypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000002ac  00000340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800108  00800108  00000348  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007e4  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ce  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a9  00000000  00000000  000012aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00001654  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003cc  00000000  00000000  000016e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000154  00000000  00000000  00001aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001c00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 19 01 	jmp	0x232	; 0x232 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ea       	ldi	r30, 0xAC	; 172
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 90 00 	call	0x120	; 0x120 <main>
  9e:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <usart_init>:

enum keyState state = wait;

void usart_init (void)
{
	UCSR0B = (1 << TXEN0) |(1 << RXEN0) | (1 << UDRIE0);
  a6:	88 e3       	ldi	r24, 0x38	; 56
  a8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = 0x06;
  ac:	86 e0       	ldi	r24, 0x06	; 6
  ae:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0 = 103;  // 115200,9
  b2:	87 e6       	ldi	r24, 0x67	; 103
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  be:	08 95       	ret

000000c0 <delay_ms>:
}

void delay_ms(unsigned int d) {
  c0:	0f 93       	push	r16
  c2:	1f 93       	push	r17
	OCR1A = d /1000 * FREQ /256;
  c4:	9c 01       	movw	r18, r24
  c6:	36 95       	lsr	r19
  c8:	27 95       	ror	r18
  ca:	36 95       	lsr	r19
  cc:	27 95       	ror	r18
  ce:	36 95       	lsr	r19
  d0:	27 95       	ror	r18
  d2:	a5 ec       	ldi	r26, 0xC5	; 197
  d4:	b0 e2       	ldi	r27, 0x20	; 32
  d6:	0e 94 3a 01 	call	0x274	; 0x274 <__umulhisi3>
  da:	dc 01       	movw	r26, r24
  dc:	b2 95       	swap	r27
  de:	a2 95       	swap	r26
  e0:	af 70       	andi	r26, 0x0F	; 15
  e2:	ab 27       	eor	r26, r27
  e4:	bf 70       	andi	r27, 0x0F	; 15
  e6:	ab 27       	eor	r26, r27
  e8:	20 e0       	ldi	r18, 0x00	; 0
  ea:	34 e2       	ldi	r19, 0x24	; 36
  ec:	44 ef       	ldi	r20, 0xF4	; 244
  ee:	50 e0       	ldi	r21, 0x00	; 0
  f0:	0e 94 49 01 	call	0x292	; 0x292 <__muluhisi3>
  f4:	8b 01       	movw	r16, r22
  f6:	9c 01       	movw	r18, r24
  f8:	99 23       	and	r25, r25
  fa:	24 f4       	brge	.+8      	; 0x104 <delay_ms+0x44>
  fc:	01 50       	subi	r16, 0x01	; 1
  fe:	1f 4f       	sbci	r17, 0xFF	; 255
 100:	2f 4f       	sbci	r18, 0xFF	; 255
 102:	3f 4f       	sbci	r19, 0xFF	; 255
 104:	bb 27       	eor	r27, r27
 106:	37 fd       	sbrc	r19, 7
 108:	ba 95       	dec	r27
 10a:	a3 2f       	mov	r26, r19
 10c:	92 2f       	mov	r25, r18
 10e:	81 2f       	mov	r24, r17
 110:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 114:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	sei();
 118:	78 94       	sei
}
 11a:	1f 91       	pop	r17
 11c:	0f 91       	pop	r16
 11e:	08 95       	ret

00000120 <main>:

int main(void)
{
	unsigned char colloc;	// column location
	unsigned char rowloc;	// row location
	usart_init();
 120:	0e 94 53 00 	call	0xa6	; 0xa6 <usart_init>
	
	DDRB = 0x07;
 124:	87 e0       	ldi	r24, 0x07	; 7
 126:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;
 128:	15 b8       	out	0x05, r1	; 5
	KEY_INPUT_DDR = 0;
 12a:	1a b8       	out	0x0a, r1	; 10
	KEY_INPUT_PORT = 0X0C;
 12c:	8c e0       	ldi	r24, 0x0C	; 12
 12e:	8b b9       	out	0x0b, r24	; 11
	
	OCR1A = 1250; // 20ms
 130:	22 ee       	ldi	r18, 0xE2	; 226
 132:	34 e0       	ldi	r19, 0x04	; 4
 134:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 138:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1A = 0;
 13c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12)|(1 << CS12); //CTC mode, prescaler = 256
 140:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 = (1<<OCIE1A);//enable Timer1 compare match
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	
    /* Replace with your application code */
    while (1) 
    {
	    checkSW00 = 0;
 14a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
		do {
			PORTB &= 0xF8;
 14e:	85 b1       	in	r24, 0x05	; 5
 150:	88 7f       	andi	r24, 0xF8	; 248
 152:	85 b9       	out	0x05, r24	; 5
			colloc = (KEY_INPUT_PIN & 0x0C);
 154:	89 b1       	in	r24, 0x09	; 9
 156:	8c 70       	andi	r24, 0x0C	; 12
		} while (colloc != 0x0C); // check until all keys released
 158:	8c 30       	cpi	r24, 0x0C	; 12
 15a:	c9 f7       	brne	.-14     	; 0x14e <main+0x2e>
		
		do {
			do 
			{
				delay_ms(20); // call delay
 15c:	84 e1       	ldi	r24, 0x14	; 20
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 60 00 	call	0xc0	; 0xc0 <delay_ms>
				colloc = (KEY_INPUT_PIN & 0x0C);
 164:	89 b1       	in	r24, 0x09	; 9
 166:	8c 70       	andi	r24, 0x0C	; 12
			} while (colloc == 0x0C);
 168:	8c 30       	cpi	r24, 0x0C	; 12
 16a:	c1 f3       	breq	.-16     	; 0x15c <main+0x3c>
				delay_ms(20); // call delay
 16c:	84 e1       	ldi	r24, 0x14	; 20
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 60 00 	call	0xc0	; 0xc0 <delay_ms>
			colloc = (KEY_INPUT_PIN & 0x0C);
 174:	89 b1       	in	r24, 0x09	; 9
 176:	8c 70       	andi	r24, 0x0C	; 12
			
		} while(colloc == 0x0C);
 178:	8c 30       	cpi	r24, 0x0C	; 12
 17a:	81 f3       	breq	.-32     	; 0x15c <main+0x3c>
		
		while(1) {
			KEY_OUTPUT_PORT = 0x0E; // ground row 0
 17c:	8e e0       	ldi	r24, 0x0E	; 14
 17e:	85 b9       	out	0x05, r24	; 5
			colloc = (KEY_INPUT_PIN & 0x0C);
 180:	89 b1       	in	r24, 0x09	; 9
 182:	8c 70       	andi	r24, 0x0C	; 12
			
			if(colloc != 0x0C) {
 184:	8c 30       	cpi	r24, 0x0C	; 12
 186:	29 f0       	breq	.+10     	; 0x192 <main+0x72>
				checkSW00++;
 188:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 18c:	8f 5f       	subi	r24, 0xFF	; 255
 18e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
			}
			
			KEY_OUTPUT_PORT = 0x0D; // ground row 1
 192:	8d e0       	ldi	r24, 0x0D	; 13
 194:	85 b9       	out	0x05, r24	; 5
			colloc = (KEY_INPUT_PIN & 0x0C);
 196:	89 b1       	in	r24, 0x09	; 9
 198:	8c 70       	andi	r24, 0x0C	; 12
			
			if(colloc != 0x0C) {
 19a:	8c 30       	cpi	r24, 0x0C	; 12
 19c:	29 f0       	breq	.+10     	; 0x1a8 <main+0x88>
				checkSW00++;
 19e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 1a2:	8f 5f       	subi	r24, 0xFF	; 255
 1a4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
			}
			
			KEY_OUTPUT_PORT = 0x0B; // ground row 2
 1a8:	8b e0       	ldi	r24, 0x0B	; 11
 1aa:	85 b9       	out	0x05, r24	; 5
			colloc = (KEY_INPUT_PIN & 0x0C);
 1ac:	89 b1       	in	r24, 0x09	; 9
 1ae:	8c 70       	andi	r24, 0x0C	; 12
			if(colloc != 0x0C) {
 1b0:	8c 30       	cpi	r24, 0x0C	; 12
 1b2:	29 f0       	breq	.+10     	; 0x1be <main+0x9e>
				checkSW00++;
 1b4:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_end>
 1b8:	9f 5f       	subi	r25, 0xFF	; 255
 1ba:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <__data_end>
			}
			
			if (checkSW00 == 3) {
 1be:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_end>
 1c2:	93 30       	cpi	r25, 0x03	; 3
 1c4:	a1 f0       	breq	.+40     	; 0x1ee <main+0xce>
				rowloc = 3;
				break;
			}
			
			KEY_OUTPUT_PORT = 0x0E; // ground row 0
 1c6:	8e e0       	ldi	r24, 0x0E	; 14
 1c8:	85 b9       	out	0x05, r24	; 5
			colloc = (KEY_INPUT_PIN & 0x0C);
 1ca:	89 b1       	in	r24, 0x09	; 9
 1cc:	8c 70       	andi	r24, 0x0C	; 12
			
			if(colloc != 0x0C) {
 1ce:	8c 30       	cpi	r24, 0x0C	; 12
 1d0:	81 f4       	brne	.+32     	; 0x1f2 <main+0xd2>
				rowloc = 0;
				break;
			}
			
			KEY_OUTPUT_PORT = 0x0D; // ground row 1
 1d2:	8d e0       	ldi	r24, 0x0D	; 13
 1d4:	85 b9       	out	0x05, r24	; 5
			colloc = (KEY_INPUT_PIN & 0x0C);
 1d6:	89 b1       	in	r24, 0x09	; 9
 1d8:	8c 70       	andi	r24, 0x0C	; 12
			
			if(colloc != 0x0C) {
 1da:	8c 30       	cpi	r24, 0x0C	; 12
 1dc:	61 f4       	brne	.+24     	; 0x1f6 <main+0xd6>
				rowloc = 1;
				break;
			}
			
			KEY_OUTPUT_PORT = 0x0B; // ground row 2
 1de:	8b e0       	ldi	r24, 0x0B	; 11
 1e0:	85 b9       	out	0x05, r24	; 5
			colloc = (KEY_INPUT_PIN & 0x0C);
 1e2:	89 b1       	in	r24, 0x09	; 9
 1e4:	8c 70       	andi	r24, 0x0C	; 12
			if(colloc != 0x0C) {
 1e6:	8c 30       	cpi	r24, 0x0C	; 12
 1e8:	49 f2       	breq	.-110    	; 0x17c <main+0x5c>
				rowloc = 2;
 1ea:	e2 e0       	ldi	r30, 0x02	; 2
 1ec:	05 c0       	rjmp	.+10     	; 0x1f8 <main+0xd8>
			if(colloc != 0x0C) {
				checkSW00++;
			}
			
			if (checkSW00 == 3) {
				rowloc = 3;
 1ee:	e3 e0       	ldi	r30, 0x03	; 3
 1f0:	03 c0       	rjmp	.+6      	; 0x1f8 <main+0xd8>
			
			KEY_OUTPUT_PORT = 0x0E; // ground row 0
			colloc = (KEY_INPUT_PIN & 0x0C);
			
			if(colloc != 0x0C) {
				rowloc = 0;
 1f2:	e0 e0       	ldi	r30, 0x00	; 0
 1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <main+0xd8>
			
			KEY_OUTPUT_PORT = 0x0D; // ground row 1
			colloc = (KEY_INPUT_PIN & 0x0C);
			
			if(colloc != 0x0C) {
				rowloc = 1;
 1f6:	e1 e0       	ldi	r30, 0x01	; 1
				break;
			}
		}
		
		// check column and 
		if (colloc ==  0x04) {
 1f8:	84 30       	cpi	r24, 0x04	; 4
 1fa:	49 f4       	brne	.+18     	; 0x20e <main+0xee>
			key_value = keypad[rowloc][0];
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	ee 0f       	add	r30, r30
 200:	ff 1f       	adc	r31, r31
 202:	e0 50       	subi	r30, 0x00	; 0
 204:	ff 4f       	sbci	r31, 0xFF	; 255
 206:	80 81       	ld	r24, Z
 208:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <key_value>
 20c:	0a c0       	rjmp	.+20     	; 0x222 <main+0x102>
		}
		else if(colloc == 0x08) {
 20e:	88 30       	cpi	r24, 0x08	; 8
 210:	41 f4       	brne	.+16     	; 0x222 <main+0x102>
			key_value = keypad[rowloc][1];
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	ee 0f       	add	r30, r30
 216:	ff 1f       	adc	r31, r31
 218:	e0 50       	subi	r30, 0x00	; 0
 21a:	ff 4f       	sbci	r31, 0xFF	; 255
 21c:	81 81       	ldd	r24, Z+1	; 0x01
 21e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <key_value>
		}
		
		send_char = key_value;
 222:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <key_value>
 226:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <send_char>
		state = send;
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <state>
    }
 230:	8c cf       	rjmp	.-232    	; 0x14a <main+0x2a>

00000232 <__vector_19>:
	return 0;
}

ISR(USART_UDRE_vect) {
 232:	1f 92       	push	r1
 234:	0f 92       	push	r0
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	0f 92       	push	r0
 23a:	11 24       	eor	r1, r1
 23c:	8f 93       	push	r24
	//UDR0 = send_char;
	if ( state == send){
 23e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <state>
 242:	81 30       	cpi	r24, 0x01	; 1
 244:	31 f4       	brne	.+12     	; 0x252 <__vector_19+0x20>
		UDR0 = send_char;
 246:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <send_char>
 24a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		state = wait;
 24e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <state>
	}
}
 252:	8f 91       	pop	r24
 254:	0f 90       	pop	r0
 256:	0f be       	out	0x3f, r0	; 63
 258:	0f 90       	pop	r0
 25a:	1f 90       	pop	r1
 25c:	18 95       	reti

0000025e <__vector_11>:

ISR(TIMER1_COMPA_vect) {
 25e:	1f 92       	push	r1
 260:	0f 92       	push	r0
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	0f 92       	push	r0
 266:	11 24       	eor	r1, r1
	cli();
 268:	f8 94       	cli
}
 26a:	0f 90       	pop	r0
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	0f 90       	pop	r0
 270:	1f 90       	pop	r1
 272:	18 95       	reti

00000274 <__umulhisi3>:
 274:	a2 9f       	mul	r26, r18
 276:	b0 01       	movw	r22, r0
 278:	b3 9f       	mul	r27, r19
 27a:	c0 01       	movw	r24, r0
 27c:	a3 9f       	mul	r26, r19
 27e:	70 0d       	add	r23, r0
 280:	81 1d       	adc	r24, r1
 282:	11 24       	eor	r1, r1
 284:	91 1d       	adc	r25, r1
 286:	b2 9f       	mul	r27, r18
 288:	70 0d       	add	r23, r0
 28a:	81 1d       	adc	r24, r1
 28c:	11 24       	eor	r1, r1
 28e:	91 1d       	adc	r25, r1
 290:	08 95       	ret

00000292 <__muluhisi3>:
 292:	0e 94 3a 01 	call	0x274	; 0x274 <__umulhisi3>
 296:	a5 9f       	mul	r26, r21
 298:	90 0d       	add	r25, r0
 29a:	b4 9f       	mul	r27, r20
 29c:	90 0d       	add	r25, r0
 29e:	a4 9f       	mul	r26, r20
 2a0:	80 0d       	add	r24, r0
 2a2:	91 1d       	adc	r25, r1
 2a4:	11 24       	eor	r1, r1
 2a6:	08 95       	ret

000002a8 <_exit>:
 2a8:	f8 94       	cli

000002aa <__stop_program>:
 2aa:	ff cf       	rjmp	.-2      	; 0x2aa <__stop_program>
